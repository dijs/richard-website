// Generated by CoffeeScript 1.7.0
var app, bottomWall, c, ctx, gameLoop, getCreeps, height, leftWall, outside, paused, render, renderCreep, resetCreep, rightWall, topWall, update, updateCreep, width;

c = $('.container canvas')[0];

ctx = c.getContext('2d');

width = 144;

height = 152;

leftWall = 16;

rightWall = 128;

topWall = 16;

bottomWall = 50;

gameLoop = function() {
  if (!paused()) {
    update();
  }
  render();
  return window.requestAnimationFrame(gameLoop);
};

outside = function(creep) {
  var rule;
  rule = creep.rules[creep._rule];
  return (Math.abs(rule.dx) > 0 && (creep._x <= leftWall || creep._x >= rightWall)) || (Math.abs(rule.dy) > 0 && (creep._y <= topWall || creep._y >= bottomWall));
};

updateCreep = function(creep) {
  var rule;
  if (creep.rules.length > 0 && creep.rules[creep._rule]) {
    rule = creep.rules[creep._rule];
    creep._x += rule.dx;
    creep._y += rule.dy;
    creep._traveled += Math.abs(rule.dx) + Math.abs(rule.dy);
    if ((rule.type === 'WALL' && outside(creep)) || (rule.type === 'DISTANCE' && creep._traveled > rule.distance)) {
      creep._traveled = 0;
      return creep._rule = (creep._rule + 1) % creep.rules.length;
    }
  }
};

resetCreep = function(creep) {
  creep._x = creep.x;
  creep._y = creep.y;
  creep._traveled = 0;
  return creep._rule = 0;
};

paused = function() {
  var scope;
  scope = angular.element('.level.active').scope();
  if (scope) {
    return scope.paused;
  } else {
    return false;
  }
};

getCreeps = function() {
  var scope;
  scope = angular.element('.level.active').scope();
  if (scope) {
    return scope.level.creeps;
  } else {
    return [];
  }
};

update = function() {
  return getCreeps().forEach(updateCreep);
};

renderCreep = function(creep) {
  ctx.fillStyle = "black";
  return ctx.fillRect(creep._x, creep._y, 8, 8);
};

render = function() {
  ctx.fillStyle = "white";
  ctx.fillRect(0, 0, width, height);
  return getCreeps().forEach(renderCreep);
};

window.requestAnimationFrame(gameLoop);

app = angular.module('editor', []);

app.directive('showtab', function() {
  return {
    link: function(scope, element) {
      return element.click(function(e) {
        e.preventDefault();
        return $(this).tab('show');
      });
    }
  };
});

app.controller('EditorCtrl', function($scope) {
  $scope.levels = [];
  $scope.addLevel = function() {
    return $scope.levels.push({
      creeps: []
    });
  };
  $scope.addCreep = function(level) {
    var creep;
    creep = {
      x: 8,
      y: 8,
      rules: []
    };
    level.creeps.push(creep);
    return $scope.resetLevel(level);
  };
  $scope.addRule = function(creep) {
    return creep.rules.push({
      dx: 0,
      dy: 0,
      type: 'WALL',
      distance: 0
    });
  };
  $scope.duplicate = function(level, creep) {
    level.creeps.push(angular.copy(creep));
    return $scope.resetLevel(level);
  };
  $scope.removeLevel = function(index) {
    return $scope.levels.splice(index, 1);
  };
  $scope.removeCreep = function(level, index) {
    return level.creeps.splice(index, 1);
  };
  $scope.removeRule = function(creep, index) {
    return creep.rules.splice(index, 1);
  };
  $scope.getCurrentLevel = function() {
    return $scope.levels[$('.level.active').index()];
  };
  $scope.resetCreep = function(creep) {
    return resetCreep(creep);
  };
  $scope.resetLevel = function(level) {
    return (level || $scope.getCurrentLevel()).creeps.forEach(resetCreep);
  };
  $scope["export"] = function() {
    return $scope.data = angular.toJson($scope.levels);
  };
  return $scope.load = function() {
    $scope.levels = JSON.parse($scope.data);
    return $scope.levels.forEach($scope.resetLevel);
  };
});
